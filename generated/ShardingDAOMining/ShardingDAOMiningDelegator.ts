// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddPool extends ethereum.Event {
  get params(): AddPool__Params {
    return new AddPool__Params(this);
  }
}

export class AddPool__Params {
  _event: AddPool;

  constructor(event: AddPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AddToBlacklist extends ethereum.Event {
  get params(): AddToBlacklist__Params {
    return new AddToBlacklist__Params(this);
  }
}

export class AddToBlacklist__Params {
  _event: AddToBlacklist;

  constructor(event: AddToBlacklist) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveFromBlacklist extends ethereum.Event {
  get params(): RemoveFromBlacklist__Params {
    return new RemoveFromBlacklist__Params(this);
  }
}

export class RemoveFromBlacklist__Params {
  _event: RemoveFromBlacklist;

  constructor(event: RemoveFromBlacklist) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Replace extends ethereum.Event {
  get params(): Replace__Params {
    return new Replace__Params(this);
  }
}

export class Replace__Params {
  _event: Replace;

  constructor(event: Replace) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rankIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newPid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShardingDAOMiningDelegator__blackListResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getBlackListResult_blackListStruct extends ethereum.Tuple {
  get pid(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }
}

export class ShardingDAOMiningDelegator__getInstantPagePoolInfoResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<Address>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromAddressArray(this.value5));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getInvitationResult {
  value0: Address;
  value1: Array<Address>;
  value2: boolean;

  constructor(value0: Address, value1: Array<Address>, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getOracleInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getPagePoolInfoResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<Address>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromAddressArray(this.value5));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getUserInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ShardingDAOMiningDelegator__getUserInfoByPidsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class ShardingDAOMiningDelegator__pendingSHARDResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ShardingDAOMiningDelegator__pendingSHARDByPidsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ShardingDAOMiningDelegator__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class ShardingDAOMiningDelegator__usersRelationshipInfoResult {
  value0: Address;
  value1: boolean;
  value2: boolean;

  constructor(value0: Address, value1: boolean, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class ShardingDAOMiningDelegator extends ethereum.SmartContract {
  static bind(address: Address): ShardingDAOMiningDelegator {
    return new ShardingDAOMiningDelegator(
      "ShardingDAOMiningDelegator",
      address
    );
  }

  INVITEE_WEIGHT(): BigInt {
    let result = super.call("INVITEE_WEIGHT", "INVITEE_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INVITEE_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVITEE_WEIGHT",
      "INVITEE_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INVITOR_WEIGHT(): BigInt {
    let result = super.call("INVITOR_WEIGHT", "INVITOR_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INVITOR_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVITOR_WEIGHT",
      "INVITOR_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_DECREASE_TERM(): BigInt {
    let result = super.call(
      "MINT_DECREASE_TERM",
      "MINT_DECREASE_TERM():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINT_DECREASE_TERM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINT_DECREASE_TERM",
      "MINT_DECREASE_TERM():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHD(): Address {
    let result = super.call("SHD", "SHD():(address)", []);

    return result[0].toAddress();
  }

  try_SHD(): ethereum.CallResult<Address> {
    let result = super.tryCall("SHD", "SHD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SHDPerBlock(): BigInt {
    let result = super.call("SHDPerBlock", "SHDPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SHDPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SHDPerBlock", "SHDPerBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETHToken(): Address {
    let result = super.call("WETHToken", "WETHToken():(address)", []);

    return result[0].toAddress();
  }

  try_WETHToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETHToken", "WETHToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amountFeeRateNumerator(): BigInt {
    let result = super.call(
      "amountFeeRateNumerator",
      "amountFeeRateNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_amountFeeRateNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountFeeRateNumerator",
      "amountFeeRateNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amountfeeRateDenominator(): BigInt {
    let result = super.call(
      "amountfeeRateDenominator",
      "amountfeeRateDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_amountfeeRateDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountfeeRateDenominator",
      "amountfeeRateDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blackList(param0: BigInt): ShardingDAOMiningDelegator__blackListResult {
    let result = super.call(
      "blackList",
      "blackList(uint256):(uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ShardingDAOMiningDelegator__blackListResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_blackList(
    param0: BigInt
  ): ethereum.CallResult<ShardingDAOMiningDelegator__blackListResult> {
    let result = super.tryCall(
      "blackList",
      "blackList(uint256):(uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__blackListResult(
        value[0].toBigInt(),
        value[1].toString()
      )
    );
  }

  blackListMap(param0: BigInt): BigInt {
    let result = super.call("blackListMap", "blackListMap(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_blackListMap(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blackListMap",
      "blackListMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractFeeRateDenominator(): BigInt {
    let result = super.call(
      "contractFeeRateDenominator",
      "contractFeeRateDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractFeeRateDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractFeeRateDenominator",
      "contractFeeRateDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractFeeRateNumerator(): BigInt {
    let result = super.call(
      "contractFeeRateNumerator",
      "contractFeeRateNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractFeeRateNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractFeeRateNumerator",
      "contractFeeRateNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegateToViewImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToViewImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  devDividendWeight(): BigInt {
    let result = super.call(
      "devDividendWeight",
      "devDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_devDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "devDividendWeight",
      "devDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  developerDAOFund(): Address {
    let result = super.call(
      "developerDAOFund",
      "developerDAOFund():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_developerDAOFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "developerDAOFund",
      "developerDAOFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBlackList(): Array<
    ShardingDAOMiningDelegator__getBlackListResult_blackListStruct
  > {
    let result = super.call(
      "getBlackList",
      "getBlackList():((uint256,string)[])",
      []
    );

    return result[0].toTupleArray<
      ShardingDAOMiningDelegator__getBlackListResult_blackListStruct
    >();
  }

  try_getBlackList(): ethereum.CallResult<
    Array<ShardingDAOMiningDelegator__getBlackListResult_blackListStruct>
  > {
    let result = super.tryCall(
      "getBlackList",
      "getBlackList():((uint256,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        ShardingDAOMiningDelegator__getBlackListResult_blackListStruct
      >()
    );
  }

  getInstantPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): ShardingDAOMiningDelegator__getInstantPagePoolInfoResult {
    let result = super.call(
      "getInstantPagePoolInfo",
      "getInstantPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );

    return new ShardingDAOMiningDelegator__getInstantPagePoolInfoResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toAddressArray()
    );
  }

  try_getInstantPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): ethereum.CallResult<
    ShardingDAOMiningDelegator__getInstantPagePoolInfoResult
  > {
    let result = super.tryCall(
      "getInstantPagePoolInfo",
      "getInstantPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getInstantPagePoolInfoResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toAddressArray()
      )
    );
  }

  getInvitation(
    _sender: Address
  ): ShardingDAOMiningDelegator__getInvitationResult {
    let result = super.call(
      "getInvitation",
      "getInvitation(address):(address,address[],bool)",
      [ethereum.Value.fromAddress(_sender)]
    );

    return new ShardingDAOMiningDelegator__getInvitationResult(
      result[0].toAddress(),
      result[1].toAddressArray(),
      result[2].toBoolean()
    );
  }

  try_getInvitation(
    _sender: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__getInvitationResult> {
    let result = super.tryCall(
      "getInvitation",
      "getInvitation(address):(address,address[],bool)",
      [ethereum.Value.fromAddress(_sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getInvitationResult(
        value[0].toAddress(),
        value[1].toAddressArray(),
        value[2].toBoolean()
      )
    );
  }

  getOracleInfo(_pid: BigInt): ShardingDAOMiningDelegator__getOracleInfoResult {
    let result = super.call(
      "getOracleInfo",
      "getOracleInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return new ShardingDAOMiningDelegator__getOracleInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getOracleInfo(
    _pid: BigInt
  ): ethereum.CallResult<ShardingDAOMiningDelegator__getOracleInfoResult> {
    let result = super.tryCall(
      "getOracleInfo",
      "getOracleInfo(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getOracleInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): ShardingDAOMiningDelegator__getPagePoolInfoResult {
    let result = super.call(
      "getPagePoolInfo",
      "getPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );

    return new ShardingDAOMiningDelegator__getPagePoolInfoResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toAddressArray()
    );
  }

  try_getPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): ethereum.CallResult<ShardingDAOMiningDelegator__getPagePoolInfoResult> {
    let result = super.tryCall(
      "getPagePoolInfo",
      "getPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getPagePoolInfoResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toAddressArray()
      )
    );
  }

  getPoolLength(): BigInt {
    let result = super.call("getPoolLength", "getPoolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolLength",
      "getPoolLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRankList(): Array<BigInt> {
    let result = super.call("getRankList", "getRankList():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getRankList(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getRankList", "getRankList():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRewardToken(_fromBlock: BigInt, _toBlock: BigInt): BigInt {
    let result = super.call(
      "getRewardToken",
      "getRewardToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_fromBlock),
        ethereum.Value.fromUnsignedBigInt(_toBlock)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardToken(
    _fromBlock: BigInt,
    _toBlock: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardToken",
      "getRewardToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_fromBlock),
        ethereum.Value.fromUnsignedBigInt(_toBlock)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserInfo(
    _pid: BigInt,
    _sender: Address
  ): ShardingDAOMiningDelegator__getUserInfoResult {
    let result = super.call(
      "getUserInfo",
      "getUserInfo(uint256,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return new ShardingDAOMiningDelegator__getUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getUserInfo(
    _pid: BigInt,
    _sender: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__getUserInfoResult> {
    let result = super.tryCall(
      "getUserInfo",
      "getUserInfo(uint256,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getUserInfoByPids(
    _pids: Array<BigInt>,
    _sender: Address
  ): ShardingDAOMiningDelegator__getUserInfoByPidsResult {
    let result = super.call(
      "getUserInfoByPids",
      "getUserInfoByPids(uint256[],address):(uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return new ShardingDAOMiningDelegator__getUserInfoByPidsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getUserInfoByPids(
    _pids: Array<BigInt>,
    _sender: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__getUserInfoByPidsResult> {
    let result = super.tryCall(
      "getUserInfoByPids",
      "getUserInfoByPids(uint256[],address):(uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__getUserInfoByPidsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isUserContractSender(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "isUserContractSender",
      "isUserContractSender(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isUserContractSender(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserContractSender",
      "isUserContractSender(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardBlock(): BigInt {
    let result = super.call(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketingFund(): Address {
    let result = super.call("marketingFund", "marketingFund():(address)", []);

    return result[0].toAddress();
  }

  try_marketingFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketingFund",
      "marketingFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxRankNumber(): BigInt {
    let result = super.call("maxRankNumber", "maxRankNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxRankNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRankNumber",
      "maxRankNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftShard(): Address {
    let result = super.call("nftShard", "nftShard():(address)", []);

    return result[0].toAddress();
  }

  try_nftShard(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftShard", "nftShard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  otherPoolDividendWeight(): BigInt {
    let result = super.call(
      "otherPoolDividendWeight",
      "otherPoolDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_otherPoolDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "otherPoolDividendWeight",
      "otherPoolDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingSHARD(
    _pid: BigInt,
    _user: Address
  ): ShardingDAOMiningDelegator__pendingSHARDResult {
    let result = super.call(
      "pendingSHARD",
      "pendingSHARD(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new ShardingDAOMiningDelegator__pendingSHARDResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_pendingSHARD(
    _pid: BigInt,
    _user: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__pendingSHARDResult> {
    let result = super.tryCall(
      "pendingSHARD",
      "pendingSHARD(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__pendingSHARDResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  pendingSHARDByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): ShardingDAOMiningDelegator__pendingSHARDByPidsResult {
    let result = super.call(
      "pendingSHARDByPids",
      "pendingSHARDByPids(uint256[],address):(uint256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new ShardingDAOMiningDelegator__pendingSHARDByPidsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_pendingSHARDByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__pendingSHARDByPidsResult> {
    let result = super.tryCall(
      "pendingSHARDByPids",
      "pendingSHARDByPids(uint256[],address):(uint256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__pendingSHARDByPidsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  poolTokenAmountLimit(param0: BigInt): BigInt {
    let result = super.call(
      "poolTokenAmountLimit",
      "poolTokenAmountLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolTokenAmountLimit(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolTokenAmountLimit",
      "poolTokenAmountLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  produceBlocksPerDay(): BigInt {
    let result = super.call(
      "produceBlocksPerDay",
      "produceBlocksPerDay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_produceBlocksPerDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "produceBlocksPerDay",
      "produceBlocksPerDay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  produceBlocksPerMonth(): BigInt {
    let result = super.call(
      "produceBlocksPerMonth",
      "produceBlocksPerMonth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_produceBlocksPerMonth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "produceBlocksPerMonth",
      "produceBlocksPerMonth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rankPoolIndex(param0: BigInt): BigInt {
    let result = super.call(
      "rankPoolIndex",
      "rankPoolIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rankPoolIndex(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rankPoolIndex",
      "rankPoolIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rankPoolIndexMap(param0: BigInt): BigInt {
    let result = super.call(
      "rankPoolIndexMap",
      "rankPoolIndexMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rankPoolIndexMap(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rankPoolIndexMap",
      "rankPoolIndexMap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveMintWeight(): BigInt {
    let result = super.call(
      "reserveMintWeight",
      "reserveMintWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveMintWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveMintWeight",
      "reserveMintWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveToMint(): BigInt {
    let result = super.call("reserveToMint", "reserveToMint():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveToMint",
      "reserveToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shardMintWeight(): BigInt {
    let result = super.call(
      "shardMintWeight",
      "shardMintWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_shardMintWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shardMintWeight",
      "shardMintWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shardPoolDividendWeight(): BigInt {
    let result = super.call(
      "shardPoolDividendWeight",
      "shardPoolDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_shardPoolDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shardPoolDividendWeight",
      "shardPoolDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unDividendShard(): BigInt {
    let result = super.call(
      "unDividendShard",
      "unDividendShard():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unDividendShard(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unDividendShard",
      "unDividendShard():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateTokenPriceTerm(): BigInt {
    let result = super.call(
      "updateTokenPriceTerm",
      "updateTokenPriceTerm():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateTokenPriceTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateTokenPriceTerm",
      "updateTokenPriceTerm():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userDividendWeight(): BigInt {
    let result = super.call(
      "userDividendWeight",
      "userDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_userDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userDividendWeight",
      "userDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(
    param0: BigInt,
    param1: Address
  ): ShardingDAOMiningDelegator__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new ShardingDAOMiningDelegator__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<ShardingDAOMiningDelegator__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  usersRelationshipInfo(
    param0: Address
  ): ShardingDAOMiningDelegator__usersRelationshipInfoResult {
    let result = super.call(
      "usersRelationshipInfo",
      "usersRelationshipInfo(address):(address,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ShardingDAOMiningDelegator__usersRelationshipInfoResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBoolean()
    );
  }

  try_usersRelationshipInfo(
    param0: Address
  ): ethereum.CallResult<
    ShardingDAOMiningDelegator__usersRelationshipInfoResult
  > {
    let result = super.tryCall(
      "usersRelationshipInfo",
      "usersRelationshipInfo(address):(address,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShardingDAOMiningDelegator__usersRelationshipInfoResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SHD(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wethToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _developerDAOFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _marketingFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _maxRankNumber(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get implementation_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class _setImplementationCall extends ethereum.Call {
  get inputs(): _setImplementationCall__Inputs {
    return new _setImplementationCall__Inputs(this);
  }

  get outputs(): _setImplementationCall__Outputs {
    return new _setImplementationCall__Outputs(this);
  }
}

export class _setImplementationCall__Inputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowResign(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class _setImplementationCall__Outputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }
}

export class AcceptInvitationCall extends ethereum.Call {
  get inputs(): AcceptInvitationCall__Inputs {
    return new AcceptInvitationCall__Inputs(this);
  }

  get outputs(): AcceptInvitationCall__Outputs {
    return new AcceptInvitationCall__Outputs(this);
  }
}

export class AcceptInvitationCall__Inputs {
  _call: AcceptInvitationCall;

  constructor(call: AcceptInvitationCall) {
    this._call = call;
  }

  get _invitor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptInvitationCall__Outputs {
  _call: AcceptInvitationCall;

  constructor(call: AcceptInvitationCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _nftPoolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpTokenSwap(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenToEthSwap(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GetInstantPagePoolInfoCall extends ethereum.Call {
  get inputs(): GetInstantPagePoolInfoCall__Inputs {
    return new GetInstantPagePoolInfoCall__Inputs(this);
  }

  get outputs(): GetInstantPagePoolInfoCall__Outputs {
    return new GetInstantPagePoolInfoCall__Outputs(this);
  }
}

export class GetInstantPagePoolInfoCall__Inputs {
  _call: GetInstantPagePoolInfoCall;

  constructor(call: GetInstantPagePoolInfoCall) {
    this._call = call;
  }

  get _fromIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _toIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetInstantPagePoolInfoCall__Outputs {
  _call: GetInstantPagePoolInfoCall;

  constructor(call: GetInstantPagePoolInfoCall) {
    this._call = call;
  }

  get _nftPoolId(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get _accumulativeDividend(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }

  get _usersTotalWeight(): Array<BigInt> {
    return this._call.outputValues[2].value.toBigIntArray();
  }

  get _lpTokenAmount(): Array<BigInt> {
    return this._call.outputValues[3].value.toBigIntArray();
  }

  get _oracleWeight(): Array<BigInt> {
    return this._call.outputValues[4].value.toBigIntArray();
  }

  get _swapAddress(): Array<Address> {
    return this._call.outputValues[5].value.toAddressArray();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _SHD(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wethToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _developerDAOFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _marketingFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _maxRankNumber(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class KickEvilPoolByPidCall extends ethereum.Call {
  get inputs(): KickEvilPoolByPidCall__Inputs {
    return new KickEvilPoolByPidCall__Inputs(this);
  }

  get outputs(): KickEvilPoolByPidCall__Outputs {
    return new KickEvilPoolByPidCall__Outputs(this);
  }
}

export class KickEvilPoolByPidCall__Inputs {
  _call: KickEvilPoolByPidCall;

  constructor(call: KickEvilPoolByPidCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class KickEvilPoolByPidCall__Outputs {
  _call: KickEvilPoolByPidCall;

  constructor(call: KickEvilPoolByPidCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetEvilPoolCall extends ethereum.Call {
  get inputs(): ResetEvilPoolCall__Inputs {
    return new ResetEvilPoolCall__Inputs(this);
  }

  get outputs(): ResetEvilPoolCall__Outputs {
    return new ResetEvilPoolCall__Outputs(this);
  }
}

export class ResetEvilPoolCall__Inputs {
  _call: ResetEvilPoolCall;

  constructor(call: ResetEvilPoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetEvilPoolCall__Outputs {
  _call: ResetEvilPoolCall;

  constructor(call: ResetEvilPoolCall) {
    this._call = call;
  }
}

export class SetContracSenderFeeRateCall extends ethereum.Call {
  get inputs(): SetContracSenderFeeRateCall__Inputs {
    return new SetContracSenderFeeRateCall__Inputs(this);
  }

  get outputs(): SetContracSenderFeeRateCall__Outputs {
    return new SetContracSenderFeeRateCall__Outputs(this);
  }
}

export class SetContracSenderFeeRateCall__Inputs {
  _call: SetContracSenderFeeRateCall;

  constructor(call: SetContracSenderFeeRateCall) {
    this._call = call;
  }

  get _feeRateNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeRateDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetContracSenderFeeRateCall__Outputs {
  _call: SetContracSenderFeeRateCall;

  constructor(call: SetContracSenderFeeRateCall) {
    this._call = call;
  }
}

export class SetDeveloperDAOFundCall extends ethereum.Call {
  get inputs(): SetDeveloperDAOFundCall__Inputs {
    return new SetDeveloperDAOFundCall__Inputs(this);
  }

  get outputs(): SetDeveloperDAOFundCall__Outputs {
    return new SetDeveloperDAOFundCall__Outputs(this);
  }
}

export class SetDeveloperDAOFundCall__Inputs {
  _call: SetDeveloperDAOFundCall;

  constructor(call: SetDeveloperDAOFundCall) {
    this._call = call;
  }

  get _developer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDeveloperDAOFundCall__Outputs {
  _call: SetDeveloperDAOFundCall;

  constructor(call: SetDeveloperDAOFundCall) {
    this._call = call;
  }
}

export class SetDividendWeightCall extends ethereum.Call {
  get inputs(): SetDividendWeightCall__Inputs {
    return new SetDividendWeightCall__Inputs(this);
  }

  get outputs(): SetDividendWeightCall__Outputs {
    return new SetDividendWeightCall__Outputs(this);
  }
}

export class SetDividendWeightCall__Inputs {
  _call: SetDividendWeightCall;

  constructor(call: SetDividendWeightCall) {
    this._call = call;
  }

  get _userDividendWeight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _devDividendWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDividendWeightCall__Outputs {
  _call: SetDividendWeightCall;

  constructor(call: SetDividendWeightCall) {
    this._call = call;
  }
}

export class SetMarketingFundCall extends ethereum.Call {
  get inputs(): SetMarketingFundCall__Inputs {
    return new SetMarketingFundCall__Inputs(this);
  }

  get outputs(): SetMarketingFundCall__Outputs {
    return new SetMarketingFundCall__Outputs(this);
  }
}

export class SetMarketingFundCall__Inputs {
  _call: SetMarketingFundCall;

  constructor(call: SetMarketingFundCall) {
    this._call = call;
  }

  get _marketingFund(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketingFundCall__Outputs {
  _call: SetMarketingFundCall;

  constructor(call: SetMarketingFundCall) {
    this._call = call;
  }
}

export class SetMaxRankNumberCall extends ethereum.Call {
  get inputs(): SetMaxRankNumberCall__Inputs {
    return new SetMaxRankNumberCall__Inputs(this);
  }

  get outputs(): SetMaxRankNumberCall__Outputs {
    return new SetMaxRankNumberCall__Outputs(this);
  }
}

export class SetMaxRankNumberCall__Inputs {
  _call: SetMaxRankNumberCall;

  constructor(call: SetMaxRankNumberCall) {
    this._call = call;
  }

  get _count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxRankNumberCall__Outputs {
  _call: SetMaxRankNumberCall;

  constructor(call: SetMaxRankNumberCall) {
    this._call = call;
  }
}

export class SetMintCoefficientCall extends ethereum.Call {
  get inputs(): SetMintCoefficientCall__Inputs {
    return new SetMintCoefficientCall__Inputs(this);
  }

  get outputs(): SetMintCoefficientCall__Outputs {
    return new SetMintCoefficientCall__Outputs(this);
  }
}

export class SetMintCoefficientCall__Inputs {
  _call: SetMintCoefficientCall;

  constructor(call: SetMintCoefficientCall) {
    this._call = call;
  }

  get _nftMintWeight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _reserveMintWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMintCoefficientCall__Outputs {
  _call: SetMintCoefficientCall;

  constructor(call: SetMintCoefficientCall) {
    this._call = call;
  }
}

export class SetNftShardCall extends ethereum.Call {
  get inputs(): SetNftShardCall__Inputs {
    return new SetNftShardCall__Inputs(this);
  }

  get outputs(): SetNftShardCall__Outputs {
    return new SetNftShardCall__Outputs(this);
  }
}

export class SetNftShardCall__Inputs {
  _call: SetNftShardCall;

  constructor(call: SetNftShardCall) {
    this._call = call;
  }

  get _nftShard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftShardCall__Outputs {
  _call: SetNftShardCall;

  constructor(call: SetNftShardCall) {
    this._call = call;
  }
}

export class SetPriceUpdateTermCall extends ethereum.Call {
  get inputs(): SetPriceUpdateTermCall__Inputs {
    return new SetPriceUpdateTermCall__Inputs(this);
  }

  get outputs(): SetPriceUpdateTermCall__Outputs {
    return new SetPriceUpdateTermCall__Outputs(this);
  }
}

export class SetPriceUpdateTermCall__Inputs {
  _call: SetPriceUpdateTermCall;

  constructor(call: SetPriceUpdateTermCall) {
    this._call = call;
  }

  get _term(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceUpdateTermCall__Outputs {
  _call: SetPriceUpdateTermCall;

  constructor(call: SetPriceUpdateTermCall) {
    this._call = call;
  }
}

export class SetSHDPerBlockCall extends ethereum.Call {
  get inputs(): SetSHDPerBlockCall__Inputs {
    return new SetSHDPerBlockCall__Inputs(this);
  }

  get outputs(): SetSHDPerBlockCall__Outputs {
    return new SetSHDPerBlockCall__Outputs(this);
  }
}

export class SetSHDPerBlockCall__Inputs {
  _call: SetSHDPerBlockCall;

  constructor(call: SetSHDPerBlockCall) {
    this._call = call;
  }

  get _shardPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSHDPerBlockCall__Outputs {
  _call: SetSHDPerBlockCall;

  constructor(call: SetSHDPerBlockCall) {
    this._call = call;
  }
}

export class SetShardPoolDividendWeightCall extends ethereum.Call {
  get inputs(): SetShardPoolDividendWeightCall__Inputs {
    return new SetShardPoolDividendWeightCall__Inputs(this);
  }

  get outputs(): SetShardPoolDividendWeightCall__Outputs {
    return new SetShardPoolDividendWeightCall__Outputs(this);
  }
}

export class SetShardPoolDividendWeightCall__Inputs {
  _call: SetShardPoolDividendWeightCall;

  constructor(call: SetShardPoolDividendWeightCall) {
    this._call = call;
  }

  get _shardPoolWeight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _otherPoolWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetShardPoolDividendWeightCall__Outputs {
  _call: SetShardPoolDividendWeightCall;

  constructor(call: SetShardPoolDividendWeightCall) {
    this._call = call;
  }
}

export class SetStartBlockCall extends ethereum.Call {
  get inputs(): SetStartBlockCall__Inputs {
    return new SetStartBlockCall__Inputs(this);
  }

  get outputs(): SetStartBlockCall__Outputs {
    return new SetStartBlockCall__Outputs(this);
  }
}

export class SetStartBlockCall__Inputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartBlockCall__Outputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }
}

export class SetTokenAmountLimitCall extends ethereum.Call {
  get inputs(): SetTokenAmountLimitCall__Inputs {
    return new SetTokenAmountLimitCall__Inputs(this);
  }

  get outputs(): SetTokenAmountLimitCall__Outputs {
    return new SetTokenAmountLimitCall__Outputs(this);
  }
}

export class SetTokenAmountLimitCall__Inputs {
  _call: SetTokenAmountLimitCall;

  constructor(call: SetTokenAmountLimitCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenAmountLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenAmountLimitCall__Outputs {
  _call: SetTokenAmountLimitCall;

  constructor(call: SetTokenAmountLimitCall) {
    this._call = call;
  }
}

export class SetTokenAmountLimitFeeRateCall extends ethereum.Call {
  get inputs(): SetTokenAmountLimitFeeRateCall__Inputs {
    return new SetTokenAmountLimitFeeRateCall__Inputs(this);
  }

  get outputs(): SetTokenAmountLimitFeeRateCall__Outputs {
    return new SetTokenAmountLimitFeeRateCall__Outputs(this);
  }
}

export class SetTokenAmountLimitFeeRateCall__Inputs {
  _call: SetTokenAmountLimitFeeRateCall;

  constructor(call: SetTokenAmountLimitFeeRateCall) {
    this._call = call;
  }

  get _feeRateNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeRateDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenAmountLimitFeeRateCall__Outputs {
  _call: SetTokenAmountLimitFeeRateCall;

  constructor(call: SetTokenAmountLimitFeeRateCall) {
    this._call = call;
  }
}

export class TransferAdminCall extends ethereum.Call {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TryToReplacePoolInRankCall extends ethereum.Call {
  get inputs(): TryToReplacePoolInRankCall__Inputs {
    return new TryToReplacePoolInRankCall__Inputs(this);
  }

  get outputs(): TryToReplacePoolInRankCall__Outputs {
    return new TryToReplacePoolInRankCall__Outputs(this);
  }
}

export class TryToReplacePoolInRankCall__Inputs {
  _call: TryToReplacePoolInRankCall;

  constructor(call: TryToReplacePoolInRankCall) {
    this._call = call;
  }

  get _poolIndexInRank(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TryToReplacePoolInRankCall__Outputs {
  _call: TryToReplacePoolInRankCall;

  constructor(call: TryToReplacePoolInRankCall) {
    this._call = call;
  }
}

export class UpdatePoolDividendCall extends ethereum.Call {
  get inputs(): UpdatePoolDividendCall__Inputs {
    return new UpdatePoolDividendCall__Inputs(this);
  }

  get outputs(): UpdatePoolDividendCall__Outputs {
    return new UpdatePoolDividendCall__Outputs(this);
  }
}

export class UpdatePoolDividendCall__Inputs {
  _call: UpdatePoolDividendCall;

  constructor(call: UpdatePoolDividendCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolDividendCall__Outputs {
  _call: UpdatePoolDividendCall;

  constructor(call: UpdatePoolDividendCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
