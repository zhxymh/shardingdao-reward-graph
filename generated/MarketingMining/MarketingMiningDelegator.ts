// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddPool extends ethereum.Event {
  get params(): AddPool__Params {
    return new AddPool__Params(this);
  }
}

export class AddPool__Params {
  _event: AddPool;

  constructor(event: AddPool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarketingMiningDelegator__getPagePoolInfoResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<Address>;
  value5: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<Address>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromAddressArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }
}

export class MarketingMiningDelegator__getPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class MarketingMiningDelegator__getUserInfoByPidsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class MarketingMiningDelegator__pendingSHARDResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class MarketingMiningDelegator__pendingSHARDByPidsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class MarketingMiningDelegator__poolInfoResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class MarketingMiningDelegator__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }
}

export class MarketingMiningDelegator extends ethereum.SmartContract {
  static bind(address: Address): MarketingMiningDelegator {
    return new MarketingMiningDelegator("MarketingMiningDelegator", address);
  }

  BONUS_MULTIPLIER(): BigInt {
    let result = super.call(
      "BONUS_MULTIPLIER",
      "BONUS_MULTIPLIER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BONUS_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BONUS_MULTIPLIER",
      "BONUS_MULTIPLIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INVITEE_WEIGHT(): BigInt {
    let result = super.call("INVITEE_WEIGHT", "INVITEE_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INVITEE_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVITEE_WEIGHT",
      "INVITEE_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INVITOR_WEIGHT(): BigInt {
    let result = super.call("INVITOR_WEIGHT", "INVITOR_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INVITOR_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVITOR_WEIGHT",
      "INVITOR_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHARD(): Address {
    let result = super.call("SHARD", "SHARD():(address)", []);

    return result[0].toAddress();
  }

  try_SHARD(): ethereum.CallResult<Address> {
    let result = super.tryCall("SHARD", "SHARD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SHDPerBlock(): BigInt {
    let result = super.call("SHDPerBlock", "SHDPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SHDPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SHDPerBlock", "SHDPerBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETHToken(): Address {
    let result = super.call("WETHToken", "WETHToken():(address)", []);

    return result[0].toAddress();
  }

  try_WETHToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETHToken", "WETHToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amountFeeRateNumerator(): BigInt {
    let result = super.call(
      "amountFeeRateNumerator",
      "amountFeeRateNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_amountFeeRateNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountFeeRateNumerator",
      "amountFeeRateNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amountfeeRateDenominator(): BigInt {
    let result = super.call(
      "amountfeeRateDenominator",
      "amountfeeRateDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_amountfeeRateDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountfeeRateDenominator",
      "amountfeeRateDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonusEndBlock(): BigInt {
    let result = super.call("bonusEndBlock", "bonusEndBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bonusEndBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bonusEndBlock",
      "bonusEndBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractFeeRateDenominator(): BigInt {
    let result = super.call(
      "contractFeeRateDenominator",
      "contractFeeRateDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractFeeRateDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractFeeRateDenominator",
      "contractFeeRateDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractFeeRateNumerator(): BigInt {
    let result = super.call(
      "contractFeeRateNumerator",
      "contractFeeRateNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractFeeRateNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractFeeRateNumerator",
      "contractFeeRateNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegateToViewImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToViewImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  devDividendWeight(): BigInt {
    let result = super.call(
      "devDividendWeight",
      "devDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_devDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "devDividendWeight",
      "devDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  developerDAOFund(): Address {
    let result = super.call(
      "developerDAOFund",
      "developerDAOFund():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_developerDAOFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "developerDAOFund",
      "developerDAOFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDepositWeight(_amount: BigInt): BigInt {
    let result = super.call(
      "getDepositWeight",
      "getDepositWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_getDepositWeight(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositWeight",
      "getDepositWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiplier(_from: BigInt, _to: BigInt): BigInt {
    let result = super.call(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMultiplier(_from: BigInt, _to: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMultiplier",
      "getMultiplier(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): MarketingMiningDelegator__getPagePoolInfoResult {
    let result = super.call(
      "getPagePoolInfo",
      "getPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );

    return new MarketingMiningDelegator__getPagePoolInfoResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toAddressArray(),
      result[5].toBigIntArray()
    );
  }

  try_getPagePoolInfo(
    _fromIndex: BigInt,
    _toIndex: BigInt
  ): ethereum.CallResult<MarketingMiningDelegator__getPagePoolInfoResult> {
    let result = super.tryCall(
      "getPagePoolInfo",
      "getPagePoolInfo(uint256,uint256):(uint256[],uint256[],uint256[],uint256[],address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_fromIndex),
        ethereum.Value.fromUnsignedBigInt(_toIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__getPagePoolInfoResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toAddressArray(),
        value[5].toBigIntArray()
      )
    );
  }

  getPoolInfo(_pid: BigInt): MarketingMiningDelegator__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo(uint256):(uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return new MarketingMiningDelegator__getPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt()
    );
  }

  try_getPoolInfo(
    _pid: BigInt
  ): ethereum.CallResult<MarketingMiningDelegator__getPoolInfoResult> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo(uint256):(uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__getPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt()
      )
    );
  }

  getPoolLength(): BigInt {
    let result = super.call("getPoolLength", "getPoolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolLength",
      "getPoolLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserInfoByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): MarketingMiningDelegator__getUserInfoByPidsResult {
    let result = super.call(
      "getUserInfoByPids",
      "getUserInfoByPids(uint256[],address):(uint256[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new MarketingMiningDelegator__getUserInfoByPidsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getUserInfoByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): ethereum.CallResult<MarketingMiningDelegator__getUserInfoByPidsResult> {
    let result = super.tryCall(
      "getUserInfoByPids",
      "getUserInfoByPids(uint256[],address):(uint256[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__getUserInfoByPidsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  invitation(): Address {
    let result = super.call("invitation", "invitation():(address)", []);

    return result[0].toAddress();
  }

  try_invitation(): ethereum.CallResult<Address> {
    let result = super.tryCall("invitation", "invitation():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isDepositAvailable(): boolean {
    let result = super.call(
      "isDepositAvailable",
      "isDepositAvailable():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isDepositAvailable(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDepositAvailable",
      "isDepositAvailable():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRevenueWithdrawable(): boolean {
    let result = super.call(
      "isRevenueWithdrawable",
      "isRevenueWithdrawable():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isRevenueWithdrawable(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRevenueWithdrawable",
      "isRevenueWithdrawable():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUserContractSender(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "isUserContractSender",
      "isUserContractSender(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isUserContractSender(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserContractSender",
      "isUserContractSender(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketingFund(): Address {
    let result = super.call("marketingFund", "marketingFund():(address)", []);

    return result[0].toAddress();
  }

  try_marketingFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketingFund",
      "marketingFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingSHARD(
    _pid: BigInt,
    _user: Address
  ): MarketingMiningDelegator__pendingSHARDResult {
    let result = super.call(
      "pendingSHARD",
      "pendingSHARD(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new MarketingMiningDelegator__pendingSHARDResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_pendingSHARD(
    _pid: BigInt,
    _user: Address
  ): ethereum.CallResult<MarketingMiningDelegator__pendingSHARDResult> {
    let result = super.tryCall(
      "pendingSHARD",
      "pendingSHARD(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__pendingSHARDResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  pendingSHARDByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): MarketingMiningDelegator__pendingSHARDByPidsResult {
    let result = super.call(
      "pendingSHARDByPids",
      "pendingSHARDByPids(uint256[],address):(uint256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new MarketingMiningDelegator__pendingSHARDByPidsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_pendingSHARDByPids(
    _pids: Array<BigInt>,
    _user: Address
  ): ethereum.CallResult<MarketingMiningDelegator__pendingSHARDByPidsResult> {
    let result = super.tryCall(
      "pendingSHARDByPids",
      "pendingSHARDByPids(uint256[],address):(uint256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_pids),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__pendingSHARDByPidsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  poolInfo(param0: BigInt): MarketingMiningDelegator__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MarketingMiningDelegator__poolInfoResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<MarketingMiningDelegator__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__poolInfoResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  poolTokenAmountLimit(param0: BigInt): BigInt {
    let result = super.call(
      "poolTokenAmountLimit",
      "poolTokenAmountLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolTokenAmountLimit(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolTokenAmountLimit",
      "poolTokenAmountLimit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAvailableDividend(): BigInt {
    let result = super.call(
      "totalAvailableDividend",
      "totalAvailableDividend():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAvailableDividend(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAvailableDividend",
      "totalAvailableDividend():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userDividendWeight(): BigInt {
    let result = super.call(
      "userDividendWeight",
      "userDividendWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_userDividendWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userDividendWeight",
      "userDividendWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(
    param0: BigInt,
    param1: Address
  ): MarketingMiningDelegator__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MarketingMiningDelegator__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<MarketingMiningDelegator__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketingMiningDelegator__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }

  userInviteeTotalAmount(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "userInviteeTotalAmount",
      "userInviteeTotalAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userInviteeTotalAmount(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userInviteeTotalAmount",
      "userInviteeTotalAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SHARD(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _invitation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bonusEndBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _shardPerBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _developerDAOFund(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _marketingFund(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get implementation_(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class _setImplementationCall extends ethereum.Call {
  get inputs(): _setImplementationCall__Inputs {
    return new _setImplementationCall__Inputs(this);
  }

  get outputs(): _setImplementationCall__Outputs {
    return new _setImplementationCall__Outputs(this);
  }
}

export class _setImplementationCall__Inputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowResign(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class _setImplementationCall__Outputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class AddAvailableDividendCall extends ethereum.Call {
  get inputs(): AddAvailableDividendCall__Inputs {
    return new AddAvailableDividendCall__Inputs(this);
  }

  get outputs(): AddAvailableDividendCall__Outputs {
    return new AddAvailableDividendCall__Outputs(this);
  }
}

export class AddAvailableDividendCall__Inputs {
  _call: AddAvailableDividendCall;

  constructor(call: AddAvailableDividendCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isUpdate(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddAvailableDividendCall__Outputs {
  _call: AddAvailableDividendCall;

  constructor(call: AddAvailableDividendCall) {
    this._call = call;
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _SHARD(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _invitation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bonusEndBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _SHDPerBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _developerDAOFund(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _marketingFund(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllocationPointCall extends ethereum.Call {
  get inputs(): SetAllocationPointCall__Inputs {
    return new SetAllocationPointCall__Inputs(this);
  }

  get outputs(): SetAllocationPointCall__Outputs {
    return new SetAllocationPointCall__Outputs(this);
  }
}

export class SetAllocationPointCall__Inputs {
  _call: SetAllocationPointCall;

  constructor(call: SetAllocationPointCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetAllocationPointCall__Outputs {
  _call: SetAllocationPointCall;

  constructor(call: SetAllocationPointCall) {
    this._call = call;
  }
}

export class SetContracSenderFeeRateCall extends ethereum.Call {
  get inputs(): SetContracSenderFeeRateCall__Inputs {
    return new SetContracSenderFeeRateCall__Inputs(this);
  }

  get outputs(): SetContracSenderFeeRateCall__Outputs {
    return new SetContracSenderFeeRateCall__Outputs(this);
  }
}

export class SetContracSenderFeeRateCall__Inputs {
  _call: SetContracSenderFeeRateCall;

  constructor(call: SetContracSenderFeeRateCall) {
    this._call = call;
  }

  get _feeRateNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeRateDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetContracSenderFeeRateCall__Outputs {
  _call: SetContracSenderFeeRateCall;

  constructor(call: SetContracSenderFeeRateCall) {
    this._call = call;
  }
}

export class SetDeveloperDAOFundCall extends ethereum.Call {
  get inputs(): SetDeveloperDAOFundCall__Inputs {
    return new SetDeveloperDAOFundCall__Inputs(this);
  }

  get outputs(): SetDeveloperDAOFundCall__Outputs {
    return new SetDeveloperDAOFundCall__Outputs(this);
  }
}

export class SetDeveloperDAOFundCall__Inputs {
  _call: SetDeveloperDAOFundCall;

  constructor(call: SetDeveloperDAOFundCall) {
    this._call = call;
  }

  get _developer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDeveloperDAOFundCall__Outputs {
  _call: SetDeveloperDAOFundCall;

  constructor(call: SetDeveloperDAOFundCall) {
    this._call = call;
  }
}

export class SetDividendWeightCall extends ethereum.Call {
  get inputs(): SetDividendWeightCall__Inputs {
    return new SetDividendWeightCall__Inputs(this);
  }

  get outputs(): SetDividendWeightCall__Outputs {
    return new SetDividendWeightCall__Outputs(this);
  }
}

export class SetDividendWeightCall__Inputs {
  _call: SetDividendWeightCall;

  constructor(call: SetDividendWeightCall) {
    this._call = call;
  }

  get _userDividendWeight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _devDividendWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDividendWeightCall__Outputs {
  _call: SetDividendWeightCall;

  constructor(call: SetDividendWeightCall) {
    this._call = call;
  }
}

export class SetIsDepositAvailableCall extends ethereum.Call {
  get inputs(): SetIsDepositAvailableCall__Inputs {
    return new SetIsDepositAvailableCall__Inputs(this);
  }

  get outputs(): SetIsDepositAvailableCall__Outputs {
    return new SetIsDepositAvailableCall__Outputs(this);
  }
}

export class SetIsDepositAvailableCall__Inputs {
  _call: SetIsDepositAvailableCall;

  constructor(call: SetIsDepositAvailableCall) {
    this._call = call;
  }

  get _isDepositAvailable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsDepositAvailableCall__Outputs {
  _call: SetIsDepositAvailableCall;

  constructor(call: SetIsDepositAvailableCall) {
    this._call = call;
  }
}

export class SetIsRevenueWithdrawableCall extends ethereum.Call {
  get inputs(): SetIsRevenueWithdrawableCall__Inputs {
    return new SetIsRevenueWithdrawableCall__Inputs(this);
  }

  get outputs(): SetIsRevenueWithdrawableCall__Outputs {
    return new SetIsRevenueWithdrawableCall__Outputs(this);
  }
}

export class SetIsRevenueWithdrawableCall__Inputs {
  _call: SetIsRevenueWithdrawableCall;

  constructor(call: SetIsRevenueWithdrawableCall) {
    this._call = call;
  }

  get _isRevenueWithdrawable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsRevenueWithdrawableCall__Outputs {
  _call: SetIsRevenueWithdrawableCall;

  constructor(call: SetIsRevenueWithdrawableCall) {
    this._call = call;
  }
}

export class SetMarketingFundCall extends ethereum.Call {
  get inputs(): SetMarketingFundCall__Inputs {
    return new SetMarketingFundCall__Inputs(this);
  }

  get outputs(): SetMarketingFundCall__Outputs {
    return new SetMarketingFundCall__Outputs(this);
  }
}

export class SetMarketingFundCall__Inputs {
  _call: SetMarketingFundCall;

  constructor(call: SetMarketingFundCall) {
    this._call = call;
  }

  get _marketingFund(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketingFundCall__Outputs {
  _call: SetMarketingFundCall;

  constructor(call: SetMarketingFundCall) {
    this._call = call;
  }
}

export class SetSHDPerBlockCall extends ethereum.Call {
  get inputs(): SetSHDPerBlockCall__Inputs {
    return new SetSHDPerBlockCall__Inputs(this);
  }

  get outputs(): SetSHDPerBlockCall__Outputs {
    return new SetSHDPerBlockCall__Outputs(this);
  }
}

export class SetSHDPerBlockCall__Inputs {
  _call: SetSHDPerBlockCall;

  constructor(call: SetSHDPerBlockCall) {
    this._call = call;
  }

  get _shardPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _withUpdate(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSHDPerBlockCall__Outputs {
  _call: SetSHDPerBlockCall;

  constructor(call: SetSHDPerBlockCall) {
    this._call = call;
  }
}

export class SetStartBlockCall extends ethereum.Call {
  get inputs(): SetStartBlockCall__Inputs {
    return new SetStartBlockCall__Inputs(this);
  }

  get outputs(): SetStartBlockCall__Outputs {
    return new SetStartBlockCall__Outputs(this);
  }
}

export class SetStartBlockCall__Inputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStartBlockCall__Outputs {
  _call: SetStartBlockCall;

  constructor(call: SetStartBlockCall) {
    this._call = call;
  }
}

export class SetTokenAmountLimitCall extends ethereum.Call {
  get inputs(): SetTokenAmountLimitCall__Inputs {
    return new SetTokenAmountLimitCall__Inputs(this);
  }

  get outputs(): SetTokenAmountLimitCall__Outputs {
    return new SetTokenAmountLimitCall__Outputs(this);
  }
}

export class SetTokenAmountLimitCall__Inputs {
  _call: SetTokenAmountLimitCall;

  constructor(call: SetTokenAmountLimitCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenAmountLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenAmountLimitCall__Outputs {
  _call: SetTokenAmountLimitCall;

  constructor(call: SetTokenAmountLimitCall) {
    this._call = call;
  }
}

export class SetTokenAmountLimitFeeRateCall extends ethereum.Call {
  get inputs(): SetTokenAmountLimitFeeRateCall__Inputs {
    return new SetTokenAmountLimitFeeRateCall__Inputs(this);
  }

  get outputs(): SetTokenAmountLimitFeeRateCall__Outputs {
    return new SetTokenAmountLimitFeeRateCall__Outputs(this);
  }
}

export class SetTokenAmountLimitFeeRateCall__Inputs {
  _call: SetTokenAmountLimitFeeRateCall;

  constructor(call: SetTokenAmountLimitFeeRateCall) {
    this._call = call;
  }

  get _feeRateNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeRateDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenAmountLimitFeeRateCall__Outputs {
  _call: SetTokenAmountLimitFeeRateCall;

  constructor(call: SetTokenAmountLimitFeeRateCall) {
    this._call = call;
  }
}

export class TransferAdminCall extends ethereum.Call {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolDividendCall extends ethereum.Call {
  get inputs(): UpdatePoolDividendCall__Inputs {
    return new UpdatePoolDividendCall__Inputs(this);
  }

  get outputs(): UpdatePoolDividendCall__Outputs {
    return new UpdatePoolDividendCall__Outputs(this);
  }
}

export class UpdatePoolDividendCall__Inputs {
  _call: UpdatePoolDividendCall;

  constructor(call: UpdatePoolDividendCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolDividendCall__Outputs {
  _call: UpdatePoolDividendCall;

  constructor(call: UpdatePoolDividendCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}
